from math import e, log10, exp, pi
from unittest import result
import numpy
from matplotlib import pyplot, rcParams, rc
from numpy.lib.type_check import real
from numpy import arcsin, arctan
import scipy
from scipy.special import kn
rc('xtick', labelsize=13) 
rc('ytick', labelsize=13)

rcParams.update({'font.size': 13})


#The relativistic runs always look like they have frozen on the first few timesteps, but as soon as the atoms start interacting, the simulation starts chopping down
#the stored trajectory list it has to search through, and speeds up massively.  
""" 
Constant variables (Ignore)
"""
c = 2.998*(10**8)
c_2 = c*c
box_size = 28.982
mass = 39.95 #g/mol
mass_to_kg = (10**(-3.0))/(6.022*(10**23.0))
length_to_m = 10**(-10.0)
box_size_m = 28.982*length_to_m
box_volume = box_size_m**3.0
mass_kg = mass*mass_to_kg
rest_mass_energy = mass_kg*(c**2) #SI units
ev_to_J = 1.60218e-19
J_to_GeV = 1/(ev_to_J*(10**(9.0)))
k_to_GeV = 11604525006170.0
k_to_eV = 11606 #divide the kelvin temperature
boltz = 1.380649*(10**(-23)) #SI


# Variables for the LJ Potential. 
epsilon = 0.01034 #ev
eps = epsilon*ev_to_J #in Joules. I have a small brain that still thinks in SI. 
sigma = 3.4*(10**(-10)) #m
r_c = sigma*2.25
r_c_2 = r_c**2.0
def Theta(T):
    return(rest_mass_energy/(boltz*T))

def temp_from_theta(THETA):
    return(rest_mass_energy/(boltz*THETA))

def gamma(beta):
    return(1/((1-(beta**2.0))**0.5))

def Maxwell_Juttner_Gamma(gam, theta): #theta = mc^2/kT
    gamma_2 = gam*gam
    if isinstance(kn(2, theta), float) == "True":
        return(real(((theta/kn(2, theta))*gamma_2*((1 - (1/gamma_2))**0.5)*exp(-theta*gam))))
    else: #trying to fix the k2 divergence.
        return(real(((theta/((1-theta)*((pi/(2*theta))**0.5)*(1 + (15/(8*theta))))))*gamma_2*((1 - (1/gamma_2))**0.5)*exp((-theta)*gam)))

def Maxwell_Juttner_Beta(beta, theta):
    gam = gamma(beta)
    return(real((theta/kn(2, theta))*(gam**5.0)*(beta**2.0)*exp(-theta*gam)))











t_from_sim = [1563869692390.2937, 6201989860014.763, 14434813949070.03, 25921101025334.86, 41494145699442.36, 65373429679167.695, 96798914014484.52, 150657400984939.75, 262814104941084.75]


ret_tot_cross_from_2_body_sim = [2.492015726294037e-20, 4.6697925644064703e-20, 5.645676961703668e-20, 6.18074288134204e-20, 6.580214076692602e-20, 6.93304783636918e-20, 7.060363746303941e-20, 6.712945857497037e-20, 5.0650498829533704e-20]
cla_tot_cross_from_2_body_sim = [2.382733328302105e-20, 4.4054724612011834e-20, 5.3089360434890316e-20, 5.803693439176747e-20, 6.169954378339639e-20, 6.490347515261866e-20, 6.601161759598984e-20, 6.269890959685688e-20, 4.728979501870697e-20]
normalisation = [0.5531977394673081, 0.8703946935449443, 0.9584219751886921,0.9825915895670252, 0.9916976558193348, 0.9927889514535283, 0.9703963713402688, 0.8861716171208242, 0.6448496548902984]
beta_by_T = [0.09572354367377418, 0.1888598153725851, 0.28347060835676313, 0.3715271056875247, 0.456566495596959, 0.5491636545976728, 0.6340447711967054, 0.7289691239794482, 0.8346481538774998]

ret_transport_cross = numpy.array([[1.2005367153896912e-20, 1.2922764769739534e-20, 1.3159768202699954e-20, 1.3160631644686549e-20, 1.3063680214885262e-20, 1.2923658534665448e-20, 1.2765286753003331e-20, 1.260019086713576e-20, 1.2434716579104195e-20, 1.2271729962401125e-20, 1.211239767918956e-20, 1.1957415137683996e-20, 1.1807353062994814e-20, 1.1661568410529886e-20, 1.1520231038027718e-20, 1.1383376613425373e-20, 1.1243496004337415e-20, 1.111148297982677e-20, 1.0981264727985576e-20, 1.0851446963594085e-20], [9.644873854767753e-21, 1.0376576455594285e-20, 1.0708361232819615e-20, 1.0851622802612254e-20, 1.0895760159473389e-20, 1.0883814515930299e-20, 1.0838870679280575e-20, 1.077398887900776e-20, 1.0697053303614003e-20, 1.0612634200458725e-20, 1.0523782426558622e-20, 1.0432619523738915e-20, 1.0340109881514366e-20, 1.0247286450845973e-20, 1.0153733798047918e-20, 1.0061914139654829e-20, 9.965507732093816e-21, 9.873711617161681e-21, 9.782771553148263e-21, 9.693045066783046e-21], [8.640309910375548e-21, 9.1893674352522e-21, 9.488299681496426e-21, 9.650781312151937e-21, 9.73295125739898e-21, 9.764876225760463e-21, 9.764599505868241e-21, 9.742671341996253e-21, 9.706160972611645e-21, 9.659513851462489e-21, 9.605579092970614e-21, 9.546673915389564e-21, 9.4842082341204e-21, 9.419249363613322e-21, 9.352556227008817e-21, 9.284559417592674e-21, 9.212575834375116e-21, 9.142986457203612e-21, 9.07338514218077e-21, 9.004705374502161e-21], [7.955442323615793e-21, 8.393005073458552e-21, 8.659628065241861e-21, 8.823837743271838e-21, 8.92292612080614e-21, 8.978210160501266e-21, 9.003713235615508e-21, 9.008479607735234e-21, 8.997863854772425e-21, 8.975713560468442e-21, 8.945667545562246e-21, 8.908739690682904e-21, 8.867402811143502e-21, 8.822049738453421e-21, 8.773627683233175e-21, 8.722689417349774e-21, 8.667989260633383e-21, 8.61366596818471e-21, 8.55835025350247e-21, 8.502952091334271e-21], [7.403016620162133e-21, 7.769866859914399e-21, 8.012905042677969e-21, 8.176129165479415e-21, 8.284941938248377e-21, 8.355981878699294e-21, 8.400098992530302e-21, 8.42381424803906e-21, 8.432289645428888e-21, 8.429473378870311e-21, 8.417252047475443e-21, 8.398109630032655e-21, 8.372791129797453e-21, 8.343072596172234e-21, 8.309460696112006e-21, 8.27277763676185e-21, 8.231192395403516e-21, 8.189054216146002e-21, 8.145086284515489e-21, 8.099986946011374e-21], [6.9372552348356e-21, 7.255332421406618e-21, 7.480085039015222e-21, 7.640755714190023e-21, 7.755885813532415e-21, 7.83814779373802e-21, 7.895568457000135e-21, 7.933840407517716e-21, 7.957524971983916e-21, 7.969437429644077e-21, 7.97170417444423e-21, 7.966556348708495e-21, 7.954904207435643e-21, 7.938079011552368e-21, 7.91680175041195e-21, 7.891567667708796e-21, 7.861744126195034e-21, 7.830101753709124e-21, 7.795954452100035e-21, 7.75995186735171e-21], [6.540934878468224e-21, 6.822698302897478e-21, 7.031808398076766e-21, 7.188756313169708e-21, 7.307416993472826e-21, 7.39684450785036e-21, 7.463705135228384e-21, 7.512586571040421e-21, 7.547998766524865e-21, 7.571633151946609e-21, 7.585787965799788e-21, 7.592320144171143e-21, 7.591869584295133e-21, 7.585735567516588e-21, 7.574663761001337e-21, 7.559509882095025e-21, 7.539875811061223e-21, 7.517423267586829e-21, 7.491979096010203e-21, 7.464173515185922e-21], [6.201682729851927e-21, 6.45439319705182e-21, 6.6495315369013456e-21, 6.801777702475177e-21, 6.920910233897389e-21, 7.015021550313302e-21, 7.088423730516547e-21, 7.145835557507343e-21, 7.189587388838623e-21, 7.222304671526871e-21, 7.246054483484432e-21, 7.261723383706825e-21, 7.270742193985253e-21, 7.273751553846826e-21, 7.27178470968288e-21, 7.265184245349078e-21, 7.25390960632469e-21, 7.239431482268439e-21, 7.221632499905577e-21, 7.201150649757315e-21], [5.907833253205691e-21, 6.1367026020095046e-21, 6.319187921401886e-21, 6.465684753216029e-21, 6.584497320026924e-21, 6.6808321785081075e-21, 6.7583075409241145e-21, 6.821521797089523e-21, 6.872110922692846e-21, 6.911746501730124e-21, 6.9432921628851e-21, 6.96603430715362e-21, 6.983030469928591e-21, 6.993763811175453e-21, 6.999023257453603e-21, 6.99983724245491e-21, 6.995752353337609e-21, 6.988175678236259e-21, 6.977075978953466e-21, 6.963009582582208e-21], [5.649469977073595e-21, 5.858178139164061e-21, 6.028870903952797e-21, 6.169832639719321e-21, 6.286732589224259e-21, 6.38326689996494e-21, 6.4643727675725e-21, 6.5311436507830424e-21, 6.586295848772406e-21, 6.63213773821464e-21, 6.66883977727017e-21, 6.698892678400142e-21, 6.7215676471974636e-21, 6.738748946037804e-21, 6.750517022065189e-21, 6.7573949515908995e-21, 6.7593461743989765e-21, 6.757774126256397e-21, 6.752494211654553e-21, 6.744062548153267e-21], [5.418204684003212e-21, 5.609645262413236e-21, 5.769949015448495e-21, 5.9049365534140714e-21, 6.01885405595574e-21, 6.115903463916189e-21, 6.1977304399277695e-21, 6.268008374569783e-21, 6.326502352582137e-21, 6.376485045322951e-21, 6.417768794489252e-21, 6.4525889769405425e-21, 6.480246615059135e-21, 6.503356627767044e-21, 6.520085794576675e-21, 6.532046342450201e-21, 6.540008496585038e-21, 6.543613649737096e-21, 6.543433527653938e-21, 6.5400022608974e-21], [5.207254186662832e-21, 5.3838459533111856e-21, 5.534506219842816e-21, 5.663598031479492e-21, 5.775023677890231e-21, 5.870663657710974e-21, 5.953649071587317e-21, 6.025007263731026e-21, 6.086807215990591e-21, 6.139046258438595e-21, 6.185061531050405e-21, 6.2239056458180695e-21, 6.255514036337496e-21, 6.282467548121343e-21, 6.3045232311515156e-21, 6.3210804548773874e-21, 6.333738015515588e-21, 6.34190967235824e-21, 6.346237433049862e-21, 6.3472495450986804e-21], [5.011431279029795e-21, 5.174951736098558e-21, 5.316689534870018e-21, 5.440575396903819e-21, 5.5483754554641584e-21, 5.64282181834511e-21, 5.725386599637937e-21, 5.797686931904867e-21, 5.861705717789691e-21, 5.916952173032524e-21, 5.965887748426549e-21, 6.0078374909676605e-21, 6.0439839575108784e-21, 6.074344820491309e-21, 6.100024227973375e-21, 6.1202889902019134e-21, 6.137131473626062e-21, 6.149335023106216e-21, 6.15767303982278e-21, 6.1626304484921276e-21], [4.8262103106970245e-21, 4.978226818400425e-21, 5.1123311348165844e-21, 5.2302654416848305e-21, 5.334792868656114e-21, 5.427731235949786e-21, 5.510083011703921e-21, 5.582738513443342e-21, 5.647880291925588e-21, 5.705531469313392e-21, 5.756673266435787e-21, 5.801130203624162e-21, 5.83957715299713e-21, 5.8740505422505824e-21, 5.902034394569447e-21, 5.9270297741359166e-21, 5.946920213101671e-21, 5.962690476429051e-21, 5.9745824571048396e-21, 5.983131930535805e-21], [4.647384542393369e-21, 4.789018229417261e-21, 4.915311894625593e-21, 5.028428485431536e-21, 5.129640347417749e-21, 5.220814579458373e-21, 5.3022327951061475e-21, 5.375277469087093e-21, 5.4414147739173114e-21, 5.499597867092512e-21, 5.553202135991581e-21, 5.599951646364777e-21, 5.641112886123973e-21, 5.6775077372417085e-21, 5.7091887983617755e-21, 5.736654894666712e-21, 5.759637041120958e-21, 5.7785787252660826e-21, 5.793690845671458e-21, 5.805468582929784e-21], [4.470527367957827e-21, 4.6028464916857945e-21, 4.72222546137095e-21, 4.830216215415643e-21, 4.928373854146926e-21, 5.0169203824643985e-21, 5.096626823297928e-21, 5.170389263553109e-21, 5.236385488256906e-21, 5.295909734328418e-21, 5.350391927478599e-21, 5.3982140952110756e-21, 5.441309889526172e-21, 5.479814523433451e-21, 5.515730325912031e-21, 5.544842221187939e-21, 5.571124224763951e-21, 5.592904526683952e-21, 5.6108668237186545e-21, 5.625565088519182e-21], [4.290109268697626e-21, 4.4138310949485456e-21, 4.526732057784344e-21, 4.6298587330553344e-21, 4.72418928975716e-21, 4.8105168450530994e-21, 4.889587018986532e-21, 4.961835449958186e-21, 5.027961795071532e-21, 5.088315782786039e-21, 5.143317606992626e-21, 5.1932520490932814e-21, 5.238432395189825e-21, 5.279087493233378e-21, 5.315388516880761e-21, 5.347569238608764e-21, 5.375695335035412e-21, 5.39997046303905e-21, 5.420495456523567e-21, 5.437768224934306e-21], [4.098245253546268e-21, 4.213751605420663e-21, 4.320182253187021e-21, 4.418368979442489e-21, 4.50895885335777e-21, 4.59258240107938e-21, 4.669768545855885e-21, 4.741000714129016e-21, 4.806608024538933e-21, 4.867004949349869e-21, 4.922472099772536e-21, 4.9732863204212146e-21, 5.019655124141622e-21, 5.061756217135033e-21, 5.0997899646072914e-21, 5.133787293440732e-21, 5.163909290041927e-21, 5.1902483701774026e-21, 5.212989832901359e-21, 5.232548381666704e-21], [3.878692737275791e-21, 3.985946201352021e-21, 4.0856897547639254e-21, 4.178500191969078e-21, 4.264848788995521e-21, 4.3452137929799325e-21, 4.419956686130017e-21, 4.489468106903094e-21, 4.553971044565117e-21, 4.613811479449018e-21, 4.66912609154117e-21, 4.720200166056249e-21, 4.767175885691514e-21, 4.810200207798941e-21, 4.849266593918539e-21, 4.8846018926717635e-21, 4.916252659829158e-21, 4.944272665992187e-21, 4.968756233736731e-21, 4.990213352311925e-21], [3.58444382989687e-21, 3.6821980571281944e-21, 3.7739001782949996e-21, 3.85994666056806e-21, 3.940633263965293e-21, 4.0162763123585476e-21, 4.087203631706989e-21, 4.153589227220578e-21, 4.2156442885773594e-21, 4.27363280810552e-21, 4.327601708837024e-21, 4.377759213361321e-21, 4.424229854378775e-21, 4.466984985155489e-21, 4.50618513079528e-21, 4.541981202255985e-21, 4.57425178183563e-21, 4.60315772031876e-21, 4.6287849057879354e-21, 4.651452573462316e-21]])
cla_transport_cross = numpy.array([[1.061437170679843e-20, 1.2095372855598826e-20, 1.2570700504777787e-20, 1.2708194768405896e-20, 1.2706144538189187e-20, 1.264012789344477e-20, 1.254351653713397e-20, 1.243249048449344e-20, 1.231538430555571e-20, 1.2196651268595226e-20, 1.2078703766556242e-20, 1.1962825261234001e-20, 1.1849643093572722e-20, 1.1739379162299728e-20, 1.16319789385001e-20, 1.152716279223088e-20, 1.1424364743684823e-20, 1.132276814556941e-20, 1.1220639840783639e-20, 1.1113866696759642e-20], [6.9541400970568e-21, 8.442976637597534e-21, 9.20736351314398e-21, 9.634312918894128e-21, 9.882694868021714e-21, 1.0027970022476047e-20, 1.0109920488702076e-20, 1.0151187468099421e-20, 1.0165428010586088e-20, 1.0161262003991719e-20, 1.0144329867227734e-20, 1.0118431357568202e-20, 1.0086187106365427e-20, 1.0049438074521585e-20, 1.000949361005376e-20, 9.967286920164672e-21, 9.923410077900272e-21, 9.878381128196949e-21, 9.832271863789743e-21, 9.784734024142491e-21], [5.3550181132182266e-21, 6.6018369647244146e-21, 7.36754849339686e-21, 7.865305448684462e-21, 8.202487219387905e-21, 8.437424156624247e-21, 8.604119767510593e-21, 8.723561730871693e-21, 8.809317897101316e-21, 8.870501658550209e-21, 8.91343656847006e-21, 8.942637513953713e-21, 8.961414279406241e-21, 8.972258066969089e-21, 8.977100256720017e-21, 8.977497113652204e-21, 8.974705932669622e-21, 8.970129281340512e-21, 8.965163677613536e-21, 8.962466016617529e-21], [4.454321277808623e-21, 5.480112051452031e-21, 6.182964735333386e-21, 6.681274216313275e-21, 7.04581739710951e-21, 7.319268468428017e-21, 7.528489991836665e-21, 7.691106133054988e-21, 7.819106727859975e-21, 7.920910663639259e-21, 8.002598737530524e-21, 8.06868017735327e-21, 8.122587971310682e-21, 8.167012851913676e-21, 8.204142030434806e-21, 8.235848072762035e-21, 8.263782829587204e-21, 8.289967549996462e-21, 8.31680392498642e-21, 8.349364212983586e-21], [3.8714139805775605e-21, 4.719690611661174e-21, 5.348303862240799e-21, 5.821965542760735e-21, 6.187015578172045e-21, 6.474109132664908e-21, 6.703850412786612e-21, 6.890470753278656e-21, 7.04407369218571e-21, 7.172020306084098e-21, 7.279807068051437e-21, 7.371639718321451e-21, 7.45082198851514e-21, 7.52003142819129e-21, 7.581530098147672e-21, 7.637348494737907e-21, 7.689386108205638e-21, 7.740129626816043e-21, 7.792785477035311e-21, 7.854436332538216e-21], [3.458549317804467e-21, 4.1658945559784815e-21, 4.723326937952403e-21, 5.16360338258174e-21, 5.516698527611577e-21, 5.804386609485742e-21, 6.042224097372779e-21, 6.241468262553727e-21, 6.410423361173734e-21, 6.5553435701849815e-21, 6.681041354900771e-21, 6.791306146594917e-21, 6.889202237484271e-21, 6.977292197342361e-21, 7.05782047106853e-21, 7.132890678772115e-21, 7.204568636415717e-21, 7.275721356707326e-21, 7.35024852896118e-21, 7.43701873431795e-21], [3.146449067164171e-21, 3.7406588279340946e-21, 4.233642451258562e-21, 4.638372308242004e-21, 4.973679146998185e-21, 5.254809919407802e-21, 5.4933555467909356e-21, 5.698090683510797e-21, 5.8757284558646754e-21, 6.0314863439373496e-21, 6.169496120947893e-21, 6.293102848948374e-21, 6.4050898305364674e-21, 6.507858494718703e-21, 6.6035890131965e-21, 6.69441237220468e-21, 6.782514891094958e-21, 6.871096235725847e-21, 6.964687312633391e-21, 7.073820646635177e-21], [2.898173785386906e-21, 3.4002222937131395e-21, 3.835838079902387e-21, 4.205556547571143e-21, 4.520479849077195e-21, 4.7910361178118286e-21, 5.025725004525101e-21, 5.231289517214457e-21, 5.413081103880756e-21, 5.5753915439860824e-21, 5.721718804747844e-21, 5.854975723366971e-21, 5.977658159722754e-21, 6.091990293329707e-21, 6.2000671608345195e-21, 6.304024023951455e-21, 6.406142802381262e-21, 6.509930188661869e-21, 6.620514387282532e-21, 6.7500254319051495e-21], [2.692016136135124e-21, 3.118053082630833e-21, 3.502721017987081e-21, 3.839012567527055e-21, 4.132584707451651e-21, 4.3902836750060434e-21, 4.6182021877935055e-21, 4.8214349976915504e-21, 5.0041870686919276e-21, 5.169943681773932e-21, 5.321632605762809e-21, 5.461765610661849e-21, 5.5925633414299225e-21, 5.716074050945418e-21, 5.8343028891277414e-21, 5.949381517413995e-21, 6.0636776817715776e-21, 6.180996767664021e-21, 6.307053855838785e-21, 6.455557056013508e-21], [2.5141540957444788e-21, 2.8769996473789474e-21, 3.21625103850163e-21, 3.521015466106504e-21, 3.793082624961117e-21, 4.036619478151014e-21, 4.255843498353034e-21, 4.454518135798974e-21, 4.63589212662511e-21, 4.802758425399591e-21, 4.957542475523082e-21, 5.102394478736841e-21, 5.239282013297467e-21, 5.370089150562262e-21, 5.496737044346794e-21, 5.6213570126790315e-21, 5.746405259741991e-21, 5.875993655265221e-21, 6.016438527823986e-21, 6.183060610335426e-21], [2.355119296824585e-21, 2.665305663889535e-21, 2.9638300210605606e-21, 3.2389483795796665e-21, 3.489738213385948e-21, 3.7183551049469915e-21, 3.927555471450258e-21, 4.120031347076641e-21, 4.298239596279366e-21, 4.464385326785754e-21, 4.620458233280063e-21, 4.768289447730004e-21, 4.9096208171924995e-21, 5.0461903637246845e-21, 5.179848432916928e-21, 5.3127377357400615e-21, 5.447416116512881e-21, 5.5883251290177934e-21, 5.7424231777667125e-21, 5.926740964207091e-21], [2.2079226013835877e-21, 2.47440595095977e-21, 2.736193775464431e-21, 2.983379405611135e-21, 3.213259787818409e-21, 3.4264865398631634e-21, 3.62468030322854e-21, 3.809675100520505e-21, 3.9832770100267356e-21, 4.147197269734799e-21, 4.3030529767734575e-21, 4.452399217981553e-21, 4.596782242283507e-21, 4.737816406998336e-21, 4.8772999174719284e-21, 5.017405637140254e-21, 5.160815804345295e-21, 5.312340084325039e-21, 5.479648123464436e-21, 5.6816497882046194e-21], [2.066949681528599e-21, 2.2975925077965298e-21, 2.5261099545330462e-21, 2.746851619085799e-21, 2.956187581079156e-21, 3.153674248489111e-21, 3.3400561644084403e-21, 3.516485873205792e-21, 3.684240187922551e-21, 3.844620858810264e-21, 3.998931742999866e-21, 4.148494565420614e-21, 4.294691935671056e-21, 4.4390403153132934e-21, 4.58330928223967e-21, 4.7297273561862485e-21, 4.88113379743276e-21, 5.042761371604664e-21, 5.2230925902890766e-21, 5.443171335522378e-21], [1.9272145490512643e-21, 2.1290999965065832e-21, 2.3274748189649632e-21, 2.5230331238718992e-21, 2.7120950958767935e-21, 2.8934913437438253e-21, 3.0673064057131828e-21, 3.2341596257237076e-21, 3.3949043245421676e-21, 3.550509208605856e-21, 3.702021053286957e-21, 3.850570678972872e-21, 3.997410816379365e-21, 4.143989243213653e-21, 4.292075602627589e-21, 4.44398718177829e-21, 4.602764636012235e-21, 4.774139114959839e-21, 4.9675488457545284e-21, 5.206537789995634e-21], [1.783741640717973e-21, 1.963339141293616e-21, 2.1345548860200044e-21, 2.3060005693692575e-21, 2.4749014595247383e-21, 2.6397545393145156e-21, 2.8001836792145206e-21, 2.9564045971500394e-21, 3.108941060965297e-21, 3.2584992533144355e-21, 3.405923028161432e-21, 3.5521953714477496e-21, 3.698475455353107e-21, 3.8461759409971014e-21, 3.99710174411631e-21, 4.1537018152825186e-21, 4.319278243626823e-21, 4.500163335743191e-21, 4.706951599018264e-21, 4.966211745002289e-21], [1.6308948415557558e-21, 1.7940377736077578e-21, 1.9411374490013667e-21, 2.089438015511606e-21, 2.2380937218813735e-21, 2.3857454285655096e-21, 2.5317781986205877e-21, 2.676130581790336e-21, 2.819084481867937e-21, 2.9611506971700203e-21, 3.103024049195477e-21, 3.2455849023963115e-21, 3.389939358663926e-21, 3.537504839160237e-21, 3.6901659444370175e-21, 3.850560091291884e-21, 4.022333695934932e-21, 4.212563314733632e-21, 4.433287955721885e-21, 4.714872252710956e-21], [1.4613729352666329e-21, 1.6128865520674416e-21, 1.739162111879232e-21, 1.86532895897837e-21, 1.993445342291485e-21, 2.122903147155312e-21, 2.253150579266254e-21, 2.384004302083011e-21, 2.5155988081094497e-21, 2.6483182431828924e-21, 2.7827646158935686e-21, 2.9197652871725504e-21, 3.06042053669064e-21, 3.206202093253348e-21, 3.3591326731122357e-21, 3.522116473952707e-21, 3.699590160080783e-21, 3.8989621055624726e-21, 4.134443058740953e-21, 4.4413825958135965e-21], [1.2645485271543072e-21, 1.4070943722312759e-21, 1.5161880420316724e-21, 1.6215580422327857e-21, 1.728748163404689e-21, 1.8385996934587756e-21, 1.951069155747671e-21, 2.066098477555853e-21, 2.183813198873128e-21, 2.3045585714418973e-21, 2.428910261423076e-21, 2.5577015505938343e-21, 2.692085775169431e-21, 2.83365441497589e-21, 2.984649560407604e-21, 3.148355579245665e-21, 3.3298742371755252e-21, 3.537848180193171e-21, 3.78907542383159e-21, 4.12586866024282e-21], [1.0219452097675356e-21, 1.1526409588689966e-21, 1.2478599666622696e-21, 1.3342931580985049e-21, 1.4202805978913931e-21, 1.508584275806291e-21, 1.6002214204001762e-21, 1.69567392345415e-21, 1.795327910761684e-21, 1.899657932320312e-21, 2.009324202468912e-21, 2.1252511065313018e-21, 2.2487252097995076e-21, 2.3815484350737296e-21, 2.5263007037052473e-21, 2.6868212041359345e-21, 2.8691664856564055e-21, 3.0837613280109725e-21, 3.3512230835555042e-21, 3.724552535094397e-21], [6.9199305818142125e-22, 7.922292186528511e-22, 8.712829748483981e-22, 9.395952887323939e-22, 1.0039966403819977e-21, 1.0681521374876817e-21, 1.1341547715737174e-21, 1.2033667530692882e-21, 1.2768331682645043e-21, 1.355509332093042e-21, 1.4404146572148557e-21, 1.5327690668347022e-21, 1.6341499642988207e-21, 1.7467122141416713e-21, 1.8735419465610752e-21, 2.0192909826682833e-21, 2.1914446897380624e-21, 2.403218461226914e-21, 2.6816035428524806e-21, 3.0990342923673484e-21],])
transport_vel = numpy.array([14276190.476190476, 28552380.95238095, 42828571.428571425, 57104761.9047619, 71380952.38095237, 85657142.85714285, 99933333.33333333, 114209523.8095238, 128485714.28571428, 142761904.76190475, 157038095.23809522, 171314285.7142857, 185590476.19047618, 199866666.66666666, 214142857.14285713, 228419047.6190476, 242695238.0952381, 256971428.57142857, 271247619.04761904, 285523809.5238095])
cla_cross_section = numpy.array([[1.650464256085987e-20, 1.6718087137648223e-20, 1.6954986425983117e-20, 1.7185995259726422e-20, 1.7401017146539287e-20, 1.7597692999923147e-20, 1.7776739413677536e-20, 1.7939912066500512e-20, 1.8089176275336553e-20, 1.822639855147906e-20, 1.8353251372028018e-20, 1.8471201635826017e-20, 1.8581530862651136e-20, 1.868536788604102e-20, 1.878372920770222e-20, 1.8877570963682205e-20, 1.8967868714305713e-20, 1.905577415064334e-20, 1.9143034965330808e-20, 1.9233792487506427e-20], [1.650464256085987e-20, 1.6718087137648223e-20, 1.6954986425983117e-20, 1.7185995259726422e-20, 1.7401017146539287e-20, 1.7597692999923147e-20, 1.7776739413677536e-20, 1.7939912066500512e-20, 1.8089176275336553e-20, 1.822639855147906e-20, 1.8353251372028018e-20, 1.8471201635826017e-20, 1.8581530862651136e-20, 1.868536788604102e-20, 1.878372920770222e-20, 1.8877570963682205e-20, 1.8967868714305713e-20, 1.905577415064334e-20, 1.9143034965330808e-20, 1.9233792487506427e-20], [1.678886864591558e-20, 1.7085938956123436e-20, 1.7387965410578288e-20, 1.766832166677244e-20, 1.7922180718924554e-20, 1.815072250439664e-20, 1.8356791970046697e-20, 1.854345248305853e-20, 1.871351400074306e-20, 1.8869414185014084e-20, 1.901322699955357e-20, 1.9146713505626538e-20, 1.9271383083183632e-20, 1.938855517837227e-20, 1.949942207041097e-20, 1.9605121220372583e-20, 1.970683383709021e-20, 1.9806011663432297e-20, 1.9904876825928932e-20, 2.0008708286951804e-20], [1.678886864591558e-20, 1.7085938956123436e-20, 1.7387965410578288e-20, 1.766832166677244e-20, 1.7922180718924554e-20, 1.815072250439664e-20, 1.8356791970046697e-20, 1.854345248305853e-20, 1.871351400074306e-20, 1.8869414185014084e-20, 1.901322699955357e-20, 1.9146713505626538e-20, 1.9271383083183632e-20, 1.938855517837227e-20, 1.949942207041097e-20, 1.9605121220372583e-20, 1.970683383709021e-20, 1.9806011663432297e-20, 1.9904876825928932e-20, 2.0008708286951804e-20], [1.7127867059578035e-20, 1.7431577613508826e-20, 1.7733607870400684e-20, 1.8013211195000942e-20, 1.8267614016449363e-20, 1.849837236918746e-20, 1.8708136350531792e-20, 1.889964087344101e-20, 1.9075387580749553e-20, 1.9237570183740057e-20, 1.9388087402778674e-20, 1.952858550253227e-20, 1.966050936687404e-20, 1.9785156541323724e-20, 1.9903736924479967e-20, 2.0017449075556217e-20, 2.0127588988934916e-20, 2.0235845877174445e-20, 2.0344896482421952e-20, 2.0461240780825167e-20], [1.7127867059578035e-20, 1.7431577613508826e-20, 1.7733607870400684e-20, 1.8013211195000942e-20, 1.8267614016449363e-20, 1.849837236918746e-20, 1.8708136350531792e-20, 1.889964087344101e-20, 1.9075387580749553e-20, 1.9237570183740057e-20, 1.9388087402778674e-20, 1.952858550253227e-20, 1.966050936687404e-20, 1.9785156541323724e-20, 1.9903736924479967e-20, 2.0017449075556217e-20, 2.0127588988934916e-20, 2.0235845877174445e-20, 2.0344896482421952e-20, 2.0461240780825167e-20], [1.747596609992314e-20, 1.7760553980484002e-20, 1.8044508741571702e-20, 1.8309499584283994e-20, 1.8553084070758893e-20, 1.8776393149676333e-20, 1.898147828525959e-20, 1.9170511040655885e-20, 1.934552452219708e-20, 1.950834352678991e-20, 1.9660585116242586e-20, 1.980368595507779e-20, 1.9938940497507076e-20, 2.0067546178823043e-20, 2.0190659177713072e-20, 2.030947333727879e-20, 2.0425336654156596e-20, 2.0540109411883e-20, 2.065683842286488e-20, 2.0783079447880322e-20], [1.747596609992314e-20, 1.7760553980484002e-20, 1.8044508741571702e-20, 1.8309499584283994e-20, 1.8553084070758893e-20, 1.8776393149676333e-20, 1.898147828525959e-20, 1.9170511040655885e-20, 1.934552452219708e-20, 1.950834352678991e-20, 1.9660585116242586e-20, 1.980368595507779e-20, 1.9938940497507076e-20, 2.0067546178823043e-20, 2.0190659177713072e-20, 2.030947333727879e-20, 2.0425336654156596e-20, 2.0540109411883e-20, 2.065683842286488e-20, 2.0783079447880322e-20], [1.7812005027794687e-20, 1.806993456869487e-20, 1.8331200074787295e-20, 1.8577877451339984e-20, 1.8807195962974916e-20, 1.9019696309628578e-20, 1.921682641121478e-20, 1.9400227504470375e-20, 1.9571494946713865e-20, 1.9732103220484855e-20, 1.9883394411364642e-20, 2.0026593303185325e-20, 2.0162835625820215e-20, 2.0293206504050153e-20, 2.0418793364032127e-20, 2.0540767389641677e-20, 2.066050612698918e-20, 2.0780008454964175e-20, 2.0902634011362124e-20, 2.1036846992917492e-20], [1.7812005027794687e-20, 1.806993456869487e-20, 1.8331200074787295e-20, 1.8577877451339984e-20, 1.8807195962974916e-20, 1.9019696309628578e-20, 1.921682641121478e-20, 1.9400227504470375e-20, 1.9571494946713865e-20, 1.9732103220484855e-20, 1.9883394411364642e-20, 2.0026593303185325e-20, 2.0162835625820215e-20, 2.0293206504050153e-20, 2.0418793364032127e-20, 2.0540767389641677e-20, 2.066050612698918e-20, 2.0780008454964175e-20, 2.0902634011362124e-20, 2.1036846992917492e-20], [1.8128778968429955e-20, 1.835933562373014e-20, 1.8597912370899482e-20, 1.882608503107481e-20, 1.904057285251154e-20, 1.9241358994319595e-20, 1.9429376231741365e-20, 1.960582372892614e-20, 1.977193096326243e-20, 1.9928875746782277e-20, 2.0077763267027524e-20, 2.0219632397121914e-20, 2.035547702346117e-20, 2.0486280030993224e-20, 2.061306489249685e-20, 2.0736980478935094e-20, 2.0859429705421296e-20, 2.0982539592877437e-20, 2.1109959092341318e-20, 2.1250992489090562e-20], [1.8128778968429955e-20, 1.835933562373014e-20, 1.8597912370899482e-20, 1.882608503107481e-20, 1.904057285251154e-20, 1.9241358994319595e-20, 1.9429376231741365e-20, 1.960582372892614e-20, 1.977193096326243e-20, 1.9928875746782277e-20, 2.0077763267027524e-20, 2.0219632397121914e-20, 2.035547702346117e-20, 2.0486280030993224e-20, 2.061306489249685e-20, 2.0736980478935094e-20, 2.0859429705421296e-20, 2.0982539592877437e-20, 2.1109959092341318e-20, 2.1250992489090562e-20], [1.84252476933404e-20, 1.8630100261780182e-20, 1.8847571338907762e-20, 1.9058304994183558e-20, 1.925851197606608e-20, 1.9447705396906543e-20, 1.9626403298421993e-20, 1.9795452193117816e-20, 1.995578818031338e-20, 2.010834857928464e-20, 2.0254044079271433e-20, 2.0393759024206858e-20, 2.052836821420367e-20, 2.0658768323224478e-20, 2.0785929584646756e-20, 2.0910984913980476e-20, 2.103536496257198e-20, 2.1161323108585134e-20, 2.1292788320560944e-20, 2.1439872790944686e-20], [1.84252476933404e-20, 1.8630100261780182e-20, 1.8847571338907762e-20, 1.9058304994183558e-20, 1.925851197606608e-20, 1.9447705396906543e-20, 1.9626403298421993e-20, 1.9795452193117816e-20, 1.995578818031338e-20, 2.010834857928464e-20, 2.0254044079271433e-20, 2.0393759024206858e-20, 2.052836821420367e-20, 2.0658768323224478e-20, 2.0785929584646756e-20, 2.0910984913980476e-20, 2.103536496257198e-20, 2.1161323108585134e-20, 2.1292788320560944e-20, 2.1439872790944686e-20], [1.8702750532861675e-20, 1.8884266819396312e-20, 1.9082651201008324e-20, 1.9277408483134146e-20, 1.9464295717384593e-20, 1.96424479996016e-20, 1.9812058275117067e-20, 1.997369759159695e-20, 2.0128071683337648e-20, 2.027592739588832e-20, 2.0418019946717905e-20, 2.0555109205167543e-20, 2.0687973732431274e-20, 2.0817441075778164e-20, 2.0944440681101716e-20, 2.1070098157450556e-20, 2.1195877103557777e-20, 2.1324159405752805e-20, 2.1459150748377306e-20, 2.1611752701613442e-20], [1.8702750532861675e-20, 1.8884266819396312e-20, 1.9082651201008324e-20, 1.9277408483134146e-20, 1.9464295717384593e-20, 1.96424479996016e-20, 1.9812058275117067e-20, 1.997369759159695e-20, 2.0128071683337648e-20, 2.027592739588832e-20, 2.0418019946717905e-20, 2.0555109205167543e-20, 2.0687973732431274e-20, 2.0817441075778164e-20, 2.0944440681101716e-20, 2.1070098157450556e-20, 2.1195877103557777e-20, 2.1324159405752805e-20, 2.1459150748377306e-20, 2.1611752701613442e-20], [1.896335087638249e-20, 1.9124048379018938e-20, 1.9305354372467875e-20, 1.948565064621414e-20, 1.9660293182184316e-20, 1.9828118973843408e-20, 1.9989069855631635e-20, 2.0143504587513295e-20, 2.0291950704597667e-20, 2.0435006884157665e-20, 2.0573306809224223e-20, 2.0707512901083724e-20, 2.0838328889548437e-20, 2.0966530080973428e-20, 2.109301841192679e-20, 2.1218922609786875e-20, 2.1345747238399336e-20, 2.1476009317362016e-20, 2.161419537426452e-20, 2.1771994077466104e-20], [1.896335087638249e-20, 1.9124048379018938e-20, 1.9305354372467875e-20, 1.948565064621414e-20, 1.9660293182184316e-20, 1.9828118973843408e-20, 1.9989069855631635e-20, 2.0143504587513295e-20, 2.0291950704597667e-20, 2.0435006884157665e-20, 2.0573306809224223e-20, 2.0707512901083724e-20, 2.0838328889548437e-20, 2.0966530080973428e-20, 2.109301841192679e-20, 2.1218922609786875e-20, 2.1345747238399336e-20, 2.1476009317362016e-20, 2.161419537426452e-20, 2.1771994077466104e-20], [1.9209165101224066e-20, 1.9351621450895167e-20, 1.951767999513366e-20, 1.968494705814175e-20, 1.9848406469345147e-20, 2.0006660259043692e-20, 2.015945811357316e-20, 2.0306997124217288e-20, 2.044966902137465e-20, 2.0587959418776166e-20, 2.0722409375352643e-20, 2.0853607641499152e-20, 2.0982202728389578e-20, 2.110893402423091e-20, 2.1234689799827852e-20, 2.1360614075882023e-20, 2.1488263628113127e-20, 2.1620302968993738e-20, 2.1761514255299874e-20, 2.1924396346457e-20], [1.9209165101224066e-20, 1.9351621450895167e-20, 1.951767999513366e-20, 1.968494705814175e-20, 1.9848406469345147e-20, 2.0006660259043692e-20, 2.015945811357316e-20, 2.0306997124217288e-20, 2.044966902137465e-20, 2.0587959418776166e-20, 2.0722409375352643e-20, 2.0853607641499152e-20, 2.0982202728389578e-20, 2.110893402423091e-20, 2.1234689799827852e-20, 2.1360614075882023e-20, 2.1488263628113127e-20, 2.1620302968993738e-20, 2.1761514255299874e-20, 2.1924396346457e-20], ])
rel_cross_section = numpy.array([[1.6550060288491365e-20, 1.6772362498637395e-20, 1.701320004509656e-20, 1.7244977145054764e-20, 1.7457440250846286e-20, 1.764872922921747e-20, 1.7820290563561646e-20, 1.7974353222790663e-20, 1.8113422256084788e-20, 1.823987085616922e-20, 1.835492471359702e-20, 1.846099613297763e-20, 1.855865892321882e-20, 1.864981934704736e-20, 1.873508609260079e-20, 1.8815575023455e-20, 1.8891968017272683e-20, 1.8964770623978378e-20, 1.9035184317116088e-20, 1.9105220878779365e-20], [1.6983775024925705e-20, 1.7321869724013652e-20, 1.7635186720546094e-20, 1.7914241823439323e-20, 1.8159936378898888e-20, 1.8376218019481646e-20, 1.8567501572615588e-20, 1.8738034771198706e-20, 1.8891011127782985e-20, 1.9028933154035204e-20, 1.9154841050754828e-20, 1.9269557312310422e-20, 1.937504786629845e-20, 1.9473146031443455e-20, 1.9563913149638617e-20, 1.9650190797952766e-20, 1.973147414228507e-20, 1.9808143879160355e-20, 1.9881857392240968e-20, 1.995436154415952e-20], [1.7482598341052953e-20, 1.7840938552101696e-20, 1.8157598851020673e-20, 1.8434719196735323e-20, 1.8677724429494212e-20, 1.889174889079706e-20, 1.9081743375537164e-20, 1.9251399116616673e-20, 1.9404173892478152e-20, 1.9542691737554434e-20, 1.9668826726558528e-20, 1.978433407494752e-20, 1.9891401590243223e-20, 1.9990181549389198e-20, 2.0082487460558175e-20, 2.016878303550902e-20, 2.0250884757221896e-20, 2.0328260901358348e-20, 2.040248813851293e-20, 2.0475216217851438e-20], [1.7959965700973845e-20, 1.8302754611766296e-20, 1.8602850419322075e-20, 1.886576413449576e-20, 1.909747575570265e-20, 1.930263515348019e-20, 1.9486136574097787e-20, 1.9650892720846565e-20, 1.9800423565137932e-20, 1.993582491873597e-20, 2.0060030267333354e-20, 2.0174124954854025e-20, 2.0279657068233872e-20, 2.0378717124338352e-20, 2.046938487004412e-20, 2.0555070588602422e-20, 2.063711471891957e-20, 2.0713758867474167e-20, 2.0787006554215832e-20, 2.0858301370407294e-20], [1.8388394296208814e-20, 1.870537494084963e-20, 1.898404458968544e-20, 1.9230286593707905e-20, 1.944864281378702e-20, 1.964408771429649e-20, 1.981996441718071e-20, 1.997906621929901e-20, 2.0123865078930907e-20, 2.025629312094746e-20, 2.0377718030427722e-20, 2.048986497495232e-20, 2.0594121245441454e-20, 2.0691239124503942e-20, 2.07814680318011e-20, 2.0866319806737434e-20, 2.0947187882284865e-20, 2.102281094170677e-20, 2.1094907977445212e-20, 2.1164655189442854e-20], [1.8767339070691097e-20, 1.9057827219918143e-20, 1.9315614621117566e-20, 1.9545305704934985e-20, 1.9751101845525725e-20, 1.9937039097554924e-20, 2.0105181673981613e-20, 2.0258696266315847e-20, 2.0398816481495824e-20, 2.052785604542796e-20, 2.0646421342747365e-20, 2.0757105339305565e-20, 2.0859295309848785e-20, 2.095540085085075e-20, 2.104432091376025e-20, 2.1128227324410003e-20, 2.1208904733462023e-20, 2.128388762146929e-20, 2.1355236797745762e-20, 2.1423966613891598e-20], [1.9105193265128394e-20, 1.9371696556491186e-20, 1.9610334347676905e-20, 1.9825227454048685e-20, 2.0019480929522767e-20, 2.019613902948919e-20, 2.0357250978859655e-20, 2.050476493884331e-20, 2.0641097894612283e-20, 2.0766753235502984e-20, 2.088339375667944e-20, 2.0991470314158123e-20, 2.1092260173131128e-20, 2.1186311243683103e-20, 2.127485521694761e-20, 2.135876668828005e-20, 2.1438830125819017e-20, 2.151341896644288e-20, 2.158440082317114e-20, 2.1652614906200557e-20], [1.9411584415942018e-20, 1.9657048006642953e-20, 1.987888074853941e-20, 2.0080386823875813e-20, 2.02642078070818e-20, 2.0432556016386018e-20, 2.0587053598108604e-20, 2.0729684517985724e-20, 2.086116155962139e-20, 2.0983716367522533e-20, 2.1098105557117573e-20, 2.1204478276797323e-20, 2.1302999657201684e-20, 2.1396002346153005e-20, 2.1484327647961903e-20, 2.156740718333414e-20, 2.1647471963164152e-20, 2.1721752330502007e-20, 2.1792548781843303e-20, 2.186053448309598e-20], [1.9694478777315254e-20, 1.9921880115563567e-20, 2.0129196051167537e-20, 2.0318867902363695e-20, 2.049331535466403e-20, 2.0653759713965955e-20, 2.0802208999772672e-20, 2.093982918262787e-20, 2.106815188786507e-20, 2.1187264869771103e-20, 2.1298279002100117e-20, 2.140262604751468e-20, 2.1501272213794397e-20, 2.1592771312286632e-20, 2.1680162064717333e-20, 2.1762225044271807e-20, 2.1841904228117458e-20, 2.1915901816661977e-20, 2.1986556006541032e-20, 2.2054372200611358e-20], [1.9960217994214824e-20, 2.0171950662548707e-20, 2.0366466678629305e-20, 2.0545696570866157e-20, 2.0711458573365343e-20, 2.086494893426393e-20, 2.100782239807454e-20, 2.11410007428893e-20, 2.1265413884019738e-20, 2.1381413121674734e-20, 2.1489995882770204e-20, 2.1592720992475852e-20, 2.1689669706940677e-20, 2.1780430097443455e-20, 2.186594476904182e-20, 2.1947977516041955e-20, 2.202714304588189e-20, 2.2100797930287612e-20, 2.2171189425482175e-20, 2.2238866151347744e-20], [2.0213541998239005e-20, 2.04116752004653e-20, 2.0595035142507785e-20, 2.0764920113613214e-20, 2.092283511692284e-20, 2.1070182743040863e-20, 2.1207581197026586e-20, 2.133657864015529e-20, 2.145677816008315e-20, 2.15696159600358e-20, 2.1676736386441498e-20, 2.1777587439978324e-20, 2.1873035367680837e-20, 2.196196838565775e-20, 2.2047960454675294e-20, 2.2127754509144934e-20, 2.220706984649798e-20, 2.2280370570741363e-20, 2.235043885250213e-20, 2.241795672002743e-20], [2.0458351402335058e-20, 2.0644775214743144e-20, 2.0817989611297268e-20, 2.0979501924668612e-20, 2.1130663127046152e-20, 2.127208269914764e-20, 2.1404659457169976e-20, 2.1529256934519963e-20, 2.1646783021817006e-20, 2.1757138406675876e-20, 2.1861931664595164e-20, 2.19604200158018e-20, 2.2054187033166302e-20, 2.2142599348796263e-20, 2.2225425349749218e-20, 2.2306173474482194e-20, 2.2384972131163602e-20, 2.2457787825319218e-20, 2.252757573792187e-20, 2.259486352814535e-20], [2.069842330951101e-20, 2.0874440236357628e-20, 2.103893495515039e-20, 2.1193211278667332e-20, 2.1337795065682132e-20, 2.1474013445979213e-20, 2.1602126407794263e-20, 2.1722553307064535e-20, 2.1836985848087522e-20, 2.1944773823568363e-20, 2.2047420937683397e-20, 2.214372917274906e-20, 2.2235851373272387e-20, 2.2323345228436107e-20, 2.240721791241593e-20, 2.248619165967047e-20, 2.2563956003961756e-20, 2.2636329190561053e-20, 2.2705746339193546e-20, 2.277284608829928e-20], [2.093768031924201e-20, 2.110450039716232e-20, 2.1261295044107018e-20, 2.1408588281531705e-20, 2.154760952378171e-20, 2.1678716680218992e-20, 2.180296945891006e-20, 2.1919998580943617e-20, 2.2031321109641524e-20, 2.2137070765121523e-20, 2.2237638741980014e-20, 2.2332558380761456e-20, 2.242301836374863e-20, 2.250944119886785e-20, 2.2591999215583377e-20, 2.2669985640797787e-20, 2.274739846991447e-20, 2.2819389011679553e-20, 2.2888484904497565e-20, 2.2955359287705428e-20], [2.118062572471375e-20, 2.1339323678542496e-20, 2.1489050686970684e-20, 2.1630354382759042e-20, 2.176422090617975e-20, 2.189106767843125e-20, 2.201130042340719e-20, 2.2125424371912518e-20, 2.2233921561755273e-20, 2.2336570161223738e-20, 2.2435262799802577e-20, 2.2528956310773804e-20, 2.2618838376405395e-20, 2.2704331473479047e-20, 2.2785244021931016e-20, 2.2862853001226294e-20, 2.2939607255906688e-20, 2.3011177818282078e-20, 2.3080051912265153e-20, 2.3146712660078585e-20], [2.1433555269548588e-20, 2.1584961190577926e-20, 2.172828088602911e-20, 2.186469246008439e-20, 2.1993858063945814e-20, 2.211668683829631e-20, 2.2233069698282103e-20, 2.2344655069820212e-20, 2.245086165562152e-20, 2.255149776600201e-20, 2.2648511826250614e-20, 2.2739914224318296e-20, 2.2828391093384254e-20, 2.2912394965988986e-20, 2.299288972007389e-20, 2.3071056556295958e-20, 2.3146487688978232e-20, 2.32177376965176e-20, 2.3286288930966957e-20, 2.3352846188477666e-20], [2.170579980437348e-20, 2.1850936115583832e-20, 2.1988874536399983e-20, 2.212012705756775e-20, 2.2245155282180177e-20, 2.236437182286041e-20, 2.2478140910574194e-20, 2.2586804587488254e-20, 2.269067476606079e-20, 2.2789976423744396e-20, 2.2885044655685364e-20, 2.297601208749508e-20, 2.3063175941953843e-20, 2.3146685788590388e-20, 2.3226743903470766e-20, 2.3303587191051245e-20, 2.3377422757325717e-20, 2.3448333166934853e-20, 2.351670753865925e-20, 2.3583130342683144e-20], [2.2014307457882053e-20, 2.21538037145462e-20, 2.228679314175066e-20, 2.2413724729037645e-20, 2.2534990345581306e-20, 2.2650951264190587e-20, 2.2761898790721997e-20, 2.2868145236807043e-20, 2.2969946946562335e-20, 2.3067530467193677e-20, 2.3161117170449293e-20, 2.32509220692201e-20, 2.3337100687952125e-20, 2.3419815365002097e-20, 2.3499300758389824e-20, 2.3575712078130242e-20, 2.3649181321258806e-20, 2.3719882156320158e-20, 2.378826550013496e-20, 2.3854586162694e-20], [2.239581176609747e-20, 2.2530414612950417e-20, 2.2659114808890462e-20, 2.2782288573069604e-20, 2.2900287216211784e-20, 2.3013410973984445e-20, 2.312194001524815e-20, 2.3226109016060257e-20, 2.3326155078611126e-20, 2.342227896265258e-20, 2.3514635010401605e-20, 2.3603473721974517e-20, 2.368887777521035e-20, 2.3771043408568522e-20, 2.38500822602633e-20, 2.3926120084073962e-20, 2.399942901661387e-20, 2.4070100547292307e-20, 2.4138416467004072e-20, 2.4204817312208275e-20], [2.2966700296827053e-20, 2.3097387894331622e-20, 2.3222677022355892e-20, 2.334290869526412e-20, 2.345835978786056e-20, 2.356932696003315e-20, 2.3676049514232346e-20, 2.3778724568404596e-20, 2.3877531307939062e-20, 2.3972667182712137e-20, 2.4064301130042685e-20, 2.4152516446911528e-20, 2.4237519481087515e-20, 2.4319471630557733e-20, 2.4398350380751395e-20, 2.4474419041973322e-20, 2.454784390261018e-20, 2.4618569481776106e-20, 2.4687132476523423e-20, 2.4753783571249438e-20]])
equal_veloc = numpy.array([14276190.476190476, 28552380.95238095, 42828571.428571425, 57104761.9047619, 71380952.38095237, 85657142.85714285, 99933333.33333333, 114209523.8095238, 128485714.28571428, 142761904.76190475, 157038095.23809522, 171314285.7142857, 185590476.19047618, 199866666.66666666, 214142857.14285713, 228419047.6190476, 242695238.0952381, 256971428.57142857, 271247619.04761904, 285523809.5238095])







classical_transport_cross_sections_by_T = numpy.array([])
retarded_transport_cross_sections_by_T = numpy.array([])
classical_cross_sections_by_T = numpy.array([])
retarded_cross_sections_by_T = numpy.array([])
normalisation_by_T = numpy.array([])
energies = numpy.array([])

for T in range(0, len(t_from_sim)):
    temperature = t_from_sim[T]


    cla_integrated = numpy.array([])
    ret_integrated = numpy.array([])

    cla_transport_integrated = numpy.array([])
    ret_transport_integrated = numpy.array([])



    cla_integrated_over_v2 = numpy.array([])
    ret_integrated_over_v2 = numpy.array([])
    
    cla_transport_integrated_over_v2 = numpy.array([])
    ret_transport_integrated_over_v2 = numpy.array([])

    temp_cla_integrand = numpy.array([])
    temp_ret_integrand = numpy.array([])

    temp_cla_transport_integrand = numpy.array([])
    temp_ret_transport_integrand = numpy.array([])

    small_juttner_distribution = numpy.array([])
    equal_beta = numpy.array([])
    for bet in range(0, len(equal_veloc)):
        equal_beta = numpy.append(equal_beta, equal_veloc[bet]/c)

    for v in range(0, len(equal_veloc)):
        small_juttner_distribution = numpy.append(small_juttner_distribution,  Maxwell_Juttner_Beta(equal_beta[v], Theta(temperature)))
  




    distribution_normalisation = numpy.sum(small_juttner_distribution)


    print("distribution normalisation: ")
    print(distribution_normalisation)
    normalisation_by_T = numpy.append(normalisation_by_T, distribution_normalisation)



    for v1 in range(0, len(equal_veloc)):
        for v2 in range(0, len(equal_veloc)):
            temp_cla_integrand = numpy.append(temp_cla_integrand, Maxwell_Juttner_Beta(equal_beta[v2], Theta(temperature))*(1/distribution_normalisation)*cla_cross_section[v1, v2])
            temp_ret_integrand = numpy.append(temp_ret_integrand, Maxwell_Juttner_Beta(equal_beta[v2], Theta(temperature))*(1/distribution_normalisation)*rel_cross_section[v1, v2])
            
            temp_cla_transport_integrand = numpy.append(temp_cla_transport_integrand, Maxwell_Juttner_Beta(equal_beta[v2], Theta(temperature))*(1/distribution_normalisation)*cla_transport_cross[v1, v2]*(1/(2*pi)))
            temp_ret_transport_integrand = numpy.append(temp_ret_transport_integrand, Maxwell_Juttner_Beta(equal_beta[v2], Theta(temperature))*(1/distribution_normalisation)*ret_transport_cross[v1, v2]*(1/(2*pi)))
                
        
        cla_integrated_over_v2 = numpy.append(cla_integrated_over_v2, numpy.sum(temp_cla_integrand))
        ret_integrated_over_v2 = numpy.append(ret_integrated_over_v2, numpy.sum(temp_ret_integrand))

        cla_transport_integrated_over_v2 = numpy.append(cla_transport_integrated_over_v2, numpy.sum(temp_cla_transport_integrand))
        ret_transport_integrated_over_v2 = numpy.append(ret_transport_integrated_over_v2, numpy.sum(temp_ret_transport_integrand))

        temp_cla_integrand = numpy.array([])
        temp_ret_integrand = numpy.array([])

        temp_cla_transport_integrand = numpy.array([])
        temp_ret_transport_integrand = numpy.array([])

    cla_v1_integrand = numpy.array([])
    ret_v1_integrand = numpy.array([])

    cla_transport_v1_integrand = numpy.array([])
    ret_transport_v1_integrand = numpy.array([])

    for v1 in range(0, len(equal_veloc)):
        cla_v1_integrand = numpy.append(cla_v1_integrand, Maxwell_Juttner_Beta(equal_beta[v1], Theta(temperature))*(1/distribution_normalisation)*cla_integrated_over_v2[v1])
        ret_v1_integrand = numpy.append(ret_v1_integrand, Maxwell_Juttner_Beta(equal_beta[v1], Theta(temperature))*(1/distribution_normalisation)*ret_integrated_over_v2[v1])

        cla_transport_v1_integrand = numpy.append(cla_transport_v1_integrand, Maxwell_Juttner_Beta(equal_beta[v1], Theta(temperature))*(1/distribution_normalisation)*cla_transport_integrated_over_v2[v1])
        ret_transport_v1_integrand = numpy.append(ret_transport_v1_integrand, Maxwell_Juttner_Beta(equal_beta[v1], Theta(temperature))*(1/distribution_normalisation)*ret_transport_integrated_over_v2[v1])


    cla_integrated = numpy.sum(cla_v1_integrand)
    ret_integrated = numpy.sum(ret_v1_integrand)

    cla_transport_integrated = numpy.sum(cla_transport_v1_integrand)
    ret_transport_integrated = numpy.sum(ret_transport_v1_integrand)

    classical_cross_sections_by_T = numpy.append(classical_cross_sections_by_T, cla_integrated*(10**20.0))
    retarded_cross_sections_by_T = numpy.append(retarded_cross_sections_by_T, ret_integrated*(10**20.0))

    classical_transport_cross_sections_by_T = numpy.append(classical_transport_cross_sections_by_T, cla_transport_integrated*(10**20.0))
    retarded_transport_cross_sections_by_T = numpy.append(retarded_transport_cross_sections_by_T, ret_transport_integrated*(10**20.0))
    energies = numpy.append(energies, t_from_sim[T]/k_to_GeV)    

percentage_difference = numpy.array([])
transport_percentage_difference = numpy.array([])
for point in range(0, len(classical_cross_sections_by_T)):
    percentage_difference = numpy.append(percentage_difference, 100*(retarded_cross_sections_by_T[point] - classical_cross_sections_by_T[point])/retarded_cross_sections_by_T[point])
    transport_percentage_difference = numpy.append(transport_percentage_difference, 100*(retarded_transport_cross_sections_by_T[point] - classical_transport_cross_sections_by_T[point])/retarded_transport_cross_sections_by_T[point])


classical_implied_radius_transport = numpy.array([])
retarded_implied_radius_transport = numpy.array([])

for i in range(len(classical_transport_cross_sections_by_T)):
    classical_implied_radius_transport = numpy.append(classical_implied_radius_transport, ((2*classical_transport_cross_sections_by_T[i])**0.5))
    retarded_implied_radius_transport = numpy.append(retarded_implied_radius_transport, ((2*retarded_transport_cross_sections_by_T[i])**0.5))


"""
print(classical_cross_sections_by_T)
print(retarded_cross_sections_by_T)
print("and for transport:")
print(classical_transport_cross_sections_by_T)
print(retarded_transport_cross_sections_by_T)
pyplot.plot(energies, classical_cross_sections_by_T, "rs-", label = "Classical Cross Section")
pyplot.plot(energies, retarded_cross_sections_by_T, "bo-", label = "Retarded Cross Section")
pyplot.xscale("log")
pyplot.xlabel("Temperature (GeV)")
pyplot.ylabel("Total Cross Section $\AA^2$")
pyplot.legend()
pyplot.figure()

pyplot.plot(energies, classical_implied_radius_transport, "rs-", label = "Classical Separation")
pyplot.plot(energies, retarded_implied_radius_transport, "bo-", label = "Retarded Separation")
pyplot.xscale("log")
pyplot.xlabel("Temperature (GeV)")
pyplot.ylabel("Implied Separation $\AA$")
pyplot.legend()
pyplot.figure()

pyplot.plot(energies, normalisation_by_T, "rs-")
pyplot.xscale("log")
pyplot.xlabel("Temperature (GeV)")
pyplot.ylabel("MJ Normalisation")
pyplot.figure()


pyplot.plot(energies, percentage_difference, "rs-")
pyplot.xscale("log")
pyplot.xlabel("Temperature (GeV)")
pyplot.ylabel("Percentage Difference in Cross Section")
pyplot.figure()
"""
print("separations")
print(retarded_implied_radius_transport)
pyplot.plot(energies, classical_transport_cross_sections_by_T, "rs-", label = "Classical Transport Cross Section")
pyplot.plot(energies, retarded_transport_cross_sections_by_T, "bo-", label = "Retarded Transport Cross Section")
pyplot.xscale("log")
pyplot.xlabel("Temperature (GeV)")
pyplot.ylabel("Total Transport Cross Section $\AA^2$")
pyplot.legend()
pyplot.figure()

pyplot.plot(energies, normalisation_by_T, "rs-")
pyplot.xscale("log")
pyplot.xlabel("Temperature (GeV)")
pyplot.ylabel("MJ Normalisation")
pyplot.figure()


pyplot.plot(energies, transport_percentage_difference, "rs-")
pyplot.xscale("log")
pyplot.xlabel("Temperature (GeV)")
pyplot.ylabel("Percentage Difference in Transport Cross Section")
pyplot.figure()


pyplot.plot(energies, classical_implied_radius_transport, "rs-", label = "Classical Separation")
pyplot.plot(energies, retarded_implied_radius_transport, "bo-", label = "Retarded Separation")
pyplot.xscale("log")
pyplot.xlabel("Temperature (GeV)")
pyplot.ylabel("Implied Separation $\AA$")
pyplot.legend()

pyplot.show()
